<?php
/*
 * TelstraMessagingAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace TelstraMessagingAPILib\Controllers;

use TelstraMessagingAPILib\APIException;
use TelstraMessagingAPILib\APIHelper;
use TelstraMessagingAPILib\Configuration;
use TelstraMessagingAPILib\Models;
use TelstraMessagingAPILib\Exceptions;
use TelstraMessagingAPILib\Http\HttpRequest;
use TelstraMessagingAPILib\Http\HttpResponse;
use TelstraMessagingAPILib\Http\HttpMethod;
use TelstraMessagingAPILib\Http\HttpContext;
use TelstraMessagingAPILib\OAuthManager;
use TelstraMessagingAPILib\Servers;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class MessagingController extends BaseController
{
    /**
     * @var MessagingController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return MessagingController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * Send SMS
     *
     * @param Models\SendSMSRequest $payload A JSON or XML payload containing the recipient's phone number and text
     *                                       message.  The recipient number should be in the format '04xxxxxxxx' where
     *                                       x is a digit
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSendSMS(
        $payload
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //the base uri for api requests
        $_queryBuilder = Configuration::getBaseUri();
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/messages/sms';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($payload));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or missing request parameters',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or no credentials passed in the request',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Authorization credentials passed and accepted but account does' .
                'not have permission',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException('The requested URI does not exist', $_httpContext);
        }

        if ($response->code == 405) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The requested resource does not support the supplied verb',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'API does not support the requested content type',
                $_httpContext
            );
        }

        if ($response->code == 422) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The request is formed correctly, but due to some condition' .
                'the request cannot be processed e.g. email is required and it is not provided' .
                'in the request',
                $_httpContext
            );
        }

        if ($response->code == 501) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The HTTP method being used has not yet been implemented for' .
                'the requested resource',
                $_httpContext
            );
        }

        if ($response->code == 503) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The service requested is currently unavailable',
                $_httpContext
            );
        }

        if (($response->code < 200) || ($response->code > 208)) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'An internal error occurred when processing the request',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'TelstraMessagingAPILib\\Models\\MessageSentResponse');
    }

    /**
     * Get SMS Status
     *
     * @param string $messageId Unique identifier of a message - it is the value returned from a previous POST call to
     *                          https://api.telstra.com/v2/messages/sms
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getSMSStatus(
        $messageId
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //the base uri for api requests
        $_queryBuilder = Configuration::getBaseUri();
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/messages/sms/{messageId}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'messageId' => $messageId,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or missing request parameters',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or no credentials passed in the request',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Authorization credentials passed and accepted but account does' .
                'not have permission',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException('The requested URI does not exist', $_httpContext);
        }

        if ($response->code == 405) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The requested resource does not support the supplied verb',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'API does not support the requested content type',
                $_httpContext
            );
        }

        if ($response->code == 422) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The request is formed correctly, but due to some condition' .
                'the request cannot be processed e.g. email is required and it is not provided' .
                'in the request',
                $_httpContext
            );
        }

        if ($response->code == 501) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The HTTP method being used has not yet been implemented for' .
                'the requested resource',
                $_httpContext
            );
        }

        if ($response->code == 503) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The service requested is currently unavailable',
                $_httpContext
            );
        }

        if (($response->code < 200) || ($response->code > 208)) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'An internal error occurred when processing the request',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClassArray($response->body, 'TelstraMessagingAPILib\\Models\\OutboundPollResponse');
    }

    /**
     * Send MMS
     *
     * @param Models\SendMMSRequest $body A JSON or XML payload containing the recipient's phone number and MMS message.
     *                                    The recipient number should be in the format '04xxxxxxxx' where x is a digit
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function createSendMMS(
        $body
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //the base uri for api requests
        $_queryBuilder = Configuration::getBaseUri();
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/messages/mms';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'content-type'  => 'application/json; charset=utf-8',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request\Body::Json($body));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException('Invalid or missing request parameters', $_httpContext);
        }

        if ($response->code == 401) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or no credentials passed in the request',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Authorization credentials passed and accepted but account does' .
                'not have permission',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException('The requested URI does not exist', $_httpContext);
        }

        if ($response->code == 405) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The requested resource does not support the supplied verb',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'API does not support the requested content type',
                $_httpContext
            );
        }

        if ($response->code == 422) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The request is formed correctly, but due to some condition' .
                'the request cannot be processed e.g. email is required and it is not provided' .
                'in the request',
                $_httpContext
            );
        }

        if ($response->code == 501) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The HTTP method being used has not yet been implemented for' .
                'the requested resource',
                $_httpContext
            );
        }

        if ($response->code == 503) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The service requested is currently unavailable',
                $_httpContext
            );
        }

        if (($response->code < 200) || ($response->code > 208)) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'An internal error occurred when processing the request',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Get MMS Status
     *
     * @param string $messageid Unique identifier of a message - it is the value returned from a previous POST call to
     *                          https://api.telstra.com/v2/messages/mms
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function getMMSStatus(
        $messageid
    ) {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //the base uri for api requests
        $_queryBuilder = Configuration::getBaseUri();
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/messages/mms/{messageid}/status';

        //process optional query parameters
        $_queryBuilder = APIHelper::appendUrlWithTemplateParameters($_queryBuilder, array (
            'messageid' => $messageid,
            ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or missing request parameters',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or no credentials passed in the request',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Authorization credentials passed and accepted but account does' .
                'not have permission',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException('The requested URI does not exist', $_httpContext);
        }

        if ($response->code == 405) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The requested resource does not support the supplied verb',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'API does not support the requested content type',
                $_httpContext
            );
        }

        if ($response->code == 422) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The request is formed correctly, but due to some condition' .
                'the request cannot be processed e.g. email is required and it is not provided' .
                'in the request',
                $_httpContext
            );
        }

        if ($response->code == 501) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The HTTP method being used has not yet been implemented for' .
                'the requested resource',
                $_httpContext
            );
        }

        if ($response->code == 503) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The service requested is currently unavailable',
                $_httpContext
            );
        }

        if (($response->code < 200) || ($response->code > 208)) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'An internal error occurred when processing the request',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClassArray($response->body, 'TelstraMessagingAPILib\\Models\\OutboundPollResponse');
    }

    /**
     * Retrieve SMS Responses
     *
     * @return mixed response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function retrieveSMSResponses()
    {
        //check or get oauth token
        OAuthManager::getInstance()->checkAuthorization();

        //the base uri for api requests
        $_queryBuilder = Configuration::getBaseUri();
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/messages/sms';

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0',
            'Accept'        => 'application/json',
            'Authorization' => sprintf('Bearer %1$s', Configuration::$oAuthToken->accessToken)
        );

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or missing request parameters',
                $_httpContext
            );
        }

        if ($response->code == 401) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Invalid or no credentials passed in the request',
                $_httpContext
            );
        }

        if ($response->code == 403) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'Authorization credentials passed and accepted but account does' .
                'not have permission',
                $_httpContext
            );
        }

        if ($response->code == 404) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException('The requested URI does not exist', $_httpContext);
        }

        if ($response->code == 405) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The requested resource does not support the supplied verb',
                $_httpContext
            );
        }

        if ($response->code == 415) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'API does not support the requested content type',
                $_httpContext
            );
        }

        if ($response->code == 422) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The request is formed correctly, but due to some condition' .
                'the request cannot be processed e.g. email is required and it is not provided' .
                'in the request',
                $_httpContext
            );
        }

        if ($response->code == 501) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The HTTP method being used has not yet been implemented for' .
                'the requested resource',
                $_httpContext
            );
        }

        if ($response->code == 503) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'The service requested is currently unavailable',
                $_httpContext
            );
        }

        if (($response->code < 200) || ($response->code > 208)) {
            throw new Exceptions\ErrorErrorErrorErrorErrorException(
                'An internal error occurred when processing the request',
                $_httpContext
            );
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        $mapper = $this->getJsonMapper();

        return $mapper->mapClass($response->body, 'TelstraMessagingAPILib\\Models\\InboundPollResponse');
    }
}
